/**
 * @file biq-theme-manager.js
 * @brief Main theme manager for widget interface
 * 
 * This is the main Class which controll the widget interaction trough angular main module. Will instantiated as angular service. Depend on:
 * - BIQThemeDialog => linked to variable member self.dialog
 * - BIQWidgetElementParser => linked to variable member self.BIQWidgetElementParser
 * <br>Both of them linked as a member / properties, since will result as circular reference if directly put as argument at angular 'factory' declaration.
 * 
 * @author Bayu candra <bayucandra@gmail.com>
*/

function BIQThemeManager( Notification, $q, BIQThemeDialog, BIQWidgetElementParser ){
    var self = this;
    self.Notification = Notification;
    self.$q = $q;
    self.BIQWidgetElementParser = BIQWidgetElementParser;
    self.structure = new BIQWidgetStructure;
    self.structure_item = null; // will set at generateWidgetImputAll()
    self.dialog = BIQThemeDialog; /// <i>self.dialog</i> variable will be referenced to md-dialog to show. Set this class by pointer to those md-dialog.
}

/**
 * @brief initializing the main Object/Class
 * 
 * Run main hover mask functions and set body events
 */
BIQThemeManager.prototype.init = function(){
    var self = this;
    $b(document).ready(function(){
        self.loading('body', 1500);
        self.hoverToEdit();
        window.onbeforeunload=function(){
            self.loading('body');
        };
    });
};

/**
 * @brief generate overlay mask over widget
 * 
 * Will be initialy called by init() function to generate overlay element above widget which will need to edit. 
 */
BIQThemeManager.prototype.hoverToEdit= function(){
    var self = this;
    self.hover_to_edit = {
	widget_sel : null,//Will be assigned with jQuery(this) on widget hover event => hoverToEdit()
	hide_delay : 500,
	is_editing : false,//If true, prevent auto hide
	hide_timeout_obj : null,// To handle setTimeout on mouseleave and must cancel by clearTimeout when enter again before delay reached
	hide: function(p_delay){
	    p_delay = typeof p_delay !== 'undefined' ? p_delay : 100;
	    $b('.hover-to-edit .highlight').hide(p_delay, function(){
		$b('.hover-to-edit').hide(0);
	    });
	},
	auto_hide: function(){
	    var self2 = this;
//	    if(!self2.is_editing){
		self2.hide();
//	    }
	},
	onmouseleave: function(){
	    var self2 = this;
	    self2.hide_timeout_obj = setTimeout( function(){ self2.auto_hide();}, self2.hide_delay );
	},
	set_overlay_sizes : function(p_callback){
//	    var self2 = this;
	    var el_sel_position = self.hover_to_edit.widget_sel.offset();

	    $b('.hover-to-edit').css({left : el_sel_position.left+'px', top : el_sel_position.top+'px'});
	    $b('.hover-to-edit .highlight').css({
		width: self.hover_to_edit.widget_sel.outerWidth(),
		height: self.hover_to_edit.widget_sel.outerHeight()
            });
            if(typeof p_callback === 'function'){
                p_callback();
            }
	}
    };
    
   var hover_to_edit_html =
	   '<div class="hover-to-edit"> \n\
		<div class="highlight" title="Double click here to edit"></div>\n\
		<div class="footer"><div class="button edit">Edit</div></div>\n\
	    </div>';
    $b('body').append(hover_to_edit_html);
    $b('.hover-to-edit .highlight').on('dblclick', function(e){
	self.editWidget(e);
    });
    $b('.hover-to-edit .footer .button').on('click', function(e){
	self.editWidget(e);
    });
    $b('.hover-to-edit').on('hover', function(e){
	if(e.type === 'mouseenter'){
	    self.hover_to_edit.is_editing = false;//temporary unused variable handler
	    clearTimeout(self.hover_to_edit.hide_timeout_obj);
	}else if(e.type === 'mouseleave'){
	    self.hover_to_edit.onmouseleave();
	}
    });
    self.widgetHoverApply();
};
/**
 * @brief apply hover mask to widget based whether "individually" per element or "all in once" to all elements
 * 
 * The "individual" procedure necessary to apply the hover overlay mask only to individual widget after creation.
 * Usually called by biq-theme-dialog.js when submit widget is finished and success
 * <br><br>The "all in once" procedure will executed on the first time whole page loaded
 * @param {String} p_widget_id the ID of widget which usually got from AJAX response generated by PHP/Wordpress server,
 *  if omitted / undefined then it is mean for "all in once procedure"
 */
BIQThemeManager.prototype.widgetHoverApply = function(p_widget_id){
    var self = this;
    var selector = typeof p_widget_id!=='undefined' ?
            '.biq-widgets[data-biq-widget-id="'+p_widget_id+'"]'//Only match to specific data-biq-widget-id
            :'.biq-widgets'; //All widget
    $b(selector).on('hover', function(e){
	if(e.type === 'mouseenter'){
            clearTimeout( self.hover_to_edit.hide_timeout_obj );
            $b('.hover-to-edit .highlight').stop(false, true);//stop previous animation: $b('.hover-to-edit .highlight').show(200);
            self.hover_to_edit.widget_sel = null;
            self.hover_to_edit.widget_sel = $b(this);
            self.hover_to_edit.set_overlay_sizes(
                function(){
                    $b('.hover-to-edit').show(0, function(){
                        $b('.hover-to-edit .highlight').show(200);
                    });
                }
            );
	}
    });
};
/**
 * @brief executed on "edit" button click or mask overlay doubleclick
 * 
 * 1.generate template for md-dialog interface and input content <br>
 * 2.show the md-dialog <br>
 * 3.hide the overlay mask interface <br>
 * 
 * @param {Object} e DOM emitted on the event click button and doubleclick overlay mask
 */
BIQThemeManager.prototype.editWidget = function(e){
    var self = this;
    
    self.hover_to_edit.is_editing = true;
    var widget_input = self.generateWidgetInputAll();
    self.dialog.biq_theme_manager = self;

    self.dialog.template = 
	'\
	    <md-dialog id="widget-dialog" aria-label="'+widget_input.title+'" class="bs-loading-container" \
		     bs-loading-overlay="widget-dialog" bs-loading-overlay-template-url="'+template_uri+'/backend/app/template/dialog/dialog-default.html" \
		     bs-loading-overlay-delay="1000" flex="{{dialog.flex}}" style="height:{{dialog.height}}" \
		ng-cloak> \
	    <form name="widgetForm" class="biq-dialog"> \
		<md-toolbar class="bdialog-toolbar"> \
		  <div class="md-toolbar-tools"> \
		    <h2>'+widget_input.title+'</h2> \
		    <span flex></span> \
		    <md-button class="md-icon-button" ng-click="hide()"> \
		      <md-icon md-svg-src="'+template_uri+'/images/icon/dialog_close.svg" aria-label="Close dialog"></md-icon> \
		    </md-button> \
		  </div> \
		</md-toolbar> \
		<md-dialog-content layout="column" layout-padding ng-if="widget_not_ready==null"> \
                    <input type="hidden" name="widget_type" ng-model="input_value.widget_type">\
                    <input type="hidden" name="widget_id" ng-model="input_value.widget_id">\
			<biq-tab tab-type="tab" header-height="40" style="margin:5px;" container-width="100%">\
		    '+
			widget_input.main + widget_input.css
		    +'  </biq-tab>\
		</md-dialog-content> \
		<md-dialog-actions layout="row" ng-if="widget_not_ready==null"> \
		    <span flex></span> \
		    <md-button type="submit" ng-hide="input_value.no_submit" ng-click="submit(true)" class="md-primary" md-autofocus>Submit</md-button> \
		    <md-button ng-click="hide()" style="margin-left:10px;">{{buttons.text.cancel}}</md-button> \
		</md-dialog-actions> \
                    \
                <md-dialog-content ng-if="widget_not_ready!=null" layout-padding>\
                    <h4 style="color:red;">Widget not ready for setting:</h4> \
                    <h3>{{widget_not_ready.message}}</h3>\
                </md-dialog-content>\
	    </form> \
	</md-dialog>';
    var values = self.BIQWidgetElementParser.getValues(
            self.hover_to_edit.widget_sel.data('biqWidgetType'), // the type of widget eg : contact_email_simple
            self.hover_to_edit.widget_sel, self.structure_item
        );
    self.$q.when(values).then(//whether promise or not
        function(data){//the promise data or just data
            var widget_not_ready = null;
            var widget_not_ready_el = self.hover_to_edit.widget_sel.children('.widget-not-ready');
            if( widget_not_ready_el.length ){
                widget_not_ready = {message: widget_not_ready_el.html()};
            }
        //    values["layout"] = self.getLayoutClass();//currently unused, used widget_id instead via BIQWidgetElementParser on each
            self.dialog.show(e, {values: data, structure: self.structure_item, widget_not_ready:widget_not_ready});

            self.hover_to_edit.onmouseleave();
        });
};
/**
 * @brief Generate input markup element for md-dialog interface
 * 
 * Produce {Object} data type, has 2 main properties. One is 'main' for the main widget input, the other is 'css' for inline and classes option.
 * @returns {Object} ret return object for input at md-dialog : <br>
 * - main : for main widget setting input
 * - css : for css input, usually 'inline' and 'classes'
 * - title: for using as md-dialog title
 * - layout: currently unused
 */
BIQThemeManager.prototype.generateWidgetInputAll = function(input_model){
    var self = this;
    var ret = {main : '-', css : '-', title: '-', layout: ''};//layout is for the main layout root ( "header", "body" or "footer" )
    //BEGIN CONVERT CLASS NAME TO STRUCTURE NAME Eg. contact-email-simple to contact_email_simpleXXXXXXXX change to using data-
//    var widget_classes = self.hover_to_edit.widget_sel.attr('class');
//    var widget_classes_split = widget_classes.split(' ');
    var widget_structure_name = self.hover_to_edit.widget_sel.data('biqWidgetType');//widget_classes_split[1].replace(/-/g, '_');
    //END CONVERT CLASS NAME TO STRUCTURE ===============
    self.structure_item = self.structure[widget_structure_name];
    
    var html_form_main = self.formMainConstruct();
    ret.main = '<biq-tab-item title="Main">'+html_form_main+'</biq-tab-item>';
    
    input_model = typeof input_model !== 'undefined' ? input_model : 'input_value.';
    
    var html_form_css = '';
    for(var i=0; i<self.structure_item.attribute_css.length; i++){
	var attribute_css = self.structure_item.attribute_css[i];
        
        html_form_css = html_form_css + self.generateInputForm[ attribute_css.type ]( attribute_css, input_model );
        
//	switch( attribute_css.type ){
//	    case "text":
//		html_form_css = html_form_css + self.generateInputForm.text( attribute_css, input_model );
//		break;
//	    case "radio":
//		html_form_css = html_form_css + self.generateInputForm.radio( attribute_css, input_model );
//		break;
//	}
    }
    ret.css = '<biq-tab-item title="CSS">'+html_form_css+'</biq-tab-item>';
    
    ret.title = self.structure_item.title;
//    ret.layout = self.getLayoutClass(); //currently unused
//    self.getStructureIdx();
    return ret;
};
/**
 * @brief Convert all structure data records to HTML input form based on functions inside generateInputForm
 * @params {Object} attribute_main by default using selected widget structure data, but it can be overide with other structure data
 * @returns {String} string in HTML format of input form
 */
BIQThemeManager.prototype.formMainConstruct = function( attribute_main, input_model ){
    var self = this;
    var html_form_main = '';
    input_model = typeof input_model !== 'undefined' ? input_model : 'input_value.';
    attribute_main = typeof attribute_main !== 'undefined' ? attribute_main : self.structure_item.attribute_main;
    for(var i=0; i<attribute_main.length; i++){
	var attribute_main_item = attribute_main[i];
        
        html_form_main = html_form_main + self.generateInputForm[ attribute_main_item.type ]( attribute_main_item,input_model );
//	switch( attribute_main_item.type ){
//	    case "text":
//		html_form_main = html_form_main + self.generateInputForm.text( attribute_main_item,input_model );
//		break;
//	    case "textarea":
//		html_form_main = html_form_main + self.generateInputForm.textarea( attribute_main_item,input_model );
//		break;
//	    case "radio":
//		html_form_main = html_form_main + self.generateInputForm.radio( attribute_main_item,input_model );
//		break;
//            case "file":
//                html_form_main = html_form_main + self.generateInputForm.file( attribute_main_item );
//                break;
//            case "list":
//                html_form_main = html_form_main + self.generateInputForm.list( attribute_main_item,input_model );
//                break;
//	}
    }
    return html_form_main;
};
/**
 * @brief Generate input form per element to call in generateWidgetInputAll()
 * 
 * The element produced in angular material style. Will call inside loop check each element of 'main' and 'css' tab.
 */
BIQThemeManager.prototype.generateInputForm = {
    two_col : function( p_structure_item, input_model ){
        var self = this;
        var ret_html = '<div layout="row">';
        var inputs = p_structure_item.inputs;
        for( var i=0; i < inputs.length; i++ ){
            ret_html = ret_html + self[inputs[i].type]( inputs[i], input_model, {flex: inputs[i].flex} );
        }
        ret_html = ret_html+'</div>';
        return ret_html;
    },
    spacer: function(p_structure_item, input_model, p_params_obj){//1st and 2nd params just dummy
        p_params_obj = typeof p_params_obj !== 'undefined' ? p_params_obj : {};
        var flex = p_params_obj.hasOwnProperty('flex') ? p_params_obj.flex : '1';
        return '<div flex="'+flex+'"></div>';
    },
    text : function( p_structure_item, input_model, p_params_obj ){//p_params_obj : { flex: 1 }
        p_params_obj = typeof p_params_obj !== 'undefined' ? p_params_obj : {};
	var is_required = ( p_structure_item.hasOwnProperty('required') && (p_structure_item.required) );
	var ngRequired = is_required ? ' ng-required="true"' : '';
        var input_wrapper_attrs = p_structure_item.hasOwnProperty( 'input_wrapper_attrs' ) ?
                ' '+p_structure_item.input_wrapper_attrs
                : '';
	var input_attrs = p_structure_item.hasOwnProperty('input_attrs') ? ' '+p_structure_item.input_attrs : '';
	var placeholder = bisnull(p_structure_item.placeholder) ? '' : '( '+p_structure_item.placeholder+' )';

        var flex = p_params_obj.hasOwnProperty('flex') ? 'flex="'+p_params_obj.flex+'"' : 'flex';
	var ret_html = 
		'<md-input-container class="md-block" '+flex+' '+input_wrapper_attrs+'>'
		    +'<label>'+p_structure_item.label+': '+placeholder+'</label> \
		    <input name="'+p_structure_item.key+'"'+ngRequired+' ng-model="'+input_model+p_structure_item.key+'"'+input_attrs+'> \
		    <div ng-if="'+is_required+'" ng-messages="widgetForm.'+p_structure_item.key+'.$error"> \
			<div ng-message="required" style="text-align:right;">'+p_structure_item.label+' is required.</div> \
		    </div> \
		</md-input-container>';
	
	return ret_html;
    },
    textarea : function( p_structure_item, input_model ){
	var is_required = ( p_structure_item.hasOwnProperty('required') && (p_structure_item.required) );
	var ngRequired = is_required ? ' ng-required="true"' : '';
        var input_wrapper_attrs = p_structure_item.hasOwnProperty( 'input_wrapper_attrs' ) ?
                ' '+p_structure_item.input_wrapper_attrs
                : '';
        var textarea_attrs = p_structure_item.hasOwnProperty('textarea_attrs') ?
                ' '+p_structure_item.textarea_attrs
                : '';
	var input_attrs = p_structure_item.hasOwnProperty('input_attrs') ? ' '+p_structure_item.input_attrs : '';
	var placeholder = bisnull(p_structure_item.placeholder) ? '' : '( '+p_structure_item.placeholder+' )';
	var ret_html = 
		'<md-input-container class="md-block" flex'+input_wrapper_attrs+'>'
		    +'<label>'+p_structure_item.label+': '+placeholder+'</label> \
		    <textarea ng-model="'+input_model+p_structure_item.key+'" name="'+p_structure_item.key+'"'+ngRequired+input_attrs+textarea_attrs+'> \n\
                    </textarea>\
		    <div ng-if="'+is_required+'" ng-messages="widgetForm.'+p_structure_item.key+'.$error"> \
			<div ng-message="required" style="text-align:right;">'+p_structure_item.label+' is required.</div> \
		    </div> \
		</md-input-container>';
	
	return ret_html;
    },
    file : function( p_structure_item ){
        var ret_html =
                '<lf-ng-md-file-input lf-files="'+p_structure_item.key+'" lf-browse-label="'+p_structure_item.label+'" \
                         accept="image/*" ng-disabled="ctrl.disabled01"> \
                    </lf-ng-md-file-input>';
        return ret_html;
    },
    radio : function(p_structure_item, input_model){
	var ret_html=
		'<md-input-container class="md-block" flex>\
		    <md-radio-group ng-model="'+input_model+p_structure_item.key+'" layout="row">\n\
		    <span class="label1 w10">'+p_structure_item.label+'</span>';
	for(var i=0; i< p_structure_item.value.length; i++){
	    var label = p_structure_item.value[i].label; var value = p_structure_item.value[i].value;
	    ret_html = ret_html + '<md-radio-button value="'+value+'" class="md-primary">'+label+'</md-radio-button>';
	}
	var ret_html = ret_html + 
		    '</md-radio-group>\n\
		</md-input-container>';
	return ret_html;
    },
    list: function(p_structure_item){
        var ret_html=
                '<input type="hidden" name="mode" ng-model="inputs.list.mode"/>'
                +'<md-content ng-show="inputs.list.mode!==\'\'" class="animate-show">'
                    +'<lf-ng-md-file-input ng-disable="inputs.list.mode===\'update\'" lf-files="'+p_structure_item.key+'" lf-api="inputs.list.api" lf-browse-label="'+p_structure_item.label+'" \
                             accept="image/*" ng-disabled="ctrl.disabled01"> \
                    </lf-ng-md-file-input>'
                    +BIQThemeManager.prototype.formMainConstruct(p_structure_item.inputs, 'inputs.list.values.')
                +'</md-content>'
                +'<div layout="row">'
                    +'<md-button class="md-primary md-raised" ng-click="inputs.list.submit()">\n\
                            {{(inputs.list.mode==\'\')?\'Add\': (inputs.list.mode===\'create\' ? \'Submit\' : \'Update\' ) }}\n\
                        </md-button>'
                    +'<md-button ng-show="inputs.list.mode!=\'\'" class="md-warn md-raised" ng-click="inputs.list.mode=\'\'">\n\
                            Cancel\n\
                        </md-button>'
                +'</div>'
                +'<br>'
                +'<md-list layout-padding>'
                    +'<md-list-item ng-repeat="record in inputs.list.server_data track by record.img_name">'
                        +'<div style="height:80px;overflow:hidden;" layout="row" layout-align="center center"><img ng-cloack src="{{record.uri_base}}/thumb_{{record.img_name}}?token={{inputs.date}}"/></div>'
                        +'<div style="height:80px;overflow:hidden;font-size:1.1rem;" layout="row" layout-padding layout-align="start center" class="flex">'
                            +'<span>{{record.inputs.title!==\'\' ? record.inputs.title : record.img_name }}</span>'
                        +'</div>'
                        +'<div layout="column">'
                            +'<md-button class="md-primary" style="margin:0;" ng-click="inputs.list.update(record.img_name)">edit</md-button>'
                            +'<md-button class="md-warn" style="margin:0;" ng-click="inputs.list.deleteConfirm(record.img_name, input_value.widget_id, input_value.widget_type, record.inputs.title)">delete</md-button>'
                        +'</div>'
                        +'<md-divider ng-if="!$last"></md-divider>'
                    +'</md-list-item>'
                +'</md-list>'
                +'<md-sidenav class="md-sidenav-left md-whiteframe-4dp" md-component-id="list-delete-confirm" flex style="max-width:100%; width:100%;">'
                    +'<h3 style="text-align:center;"><font style="color:#999999">Confirm to delete :</font> {{inputs.list.delete_select.title}} ?</h3>\n\
                        <div layout="column" layout-align="center center">\n\
                                <md-button class="md-warn md-raised" ng-click="inputs.list.delete()">\n\
                                    Yes\n\
                                </md-button>\n\
                                <md-button class="md-raised" ng-click="inputs.list.deleteCancel()">\n\
                                    No\n\
                                </md-button>\n\
                        </div>'
                +'</md-sidenav>';
        return ret_html;
    }
};
/**
 * @brief display loading inside an element.
 * @param {String} p_selector jQuery format selector where the loading will be displayed
 * @param {Integer} p_timeout Delay timeout for the loading to be displayed ( in millisecond )
 */
BIQThemeManager.prototype.loading = function(p_selector, p_timeout){// #id or .class
    var loading_html = '<div id="biq-loading">\n\
	<div class="image">\n\
	    <img src="'+template_uri+'/images/biq/biq-logo.png"\n\
	    <br /><h3>Loading...</h3>\n\
	</div>\n\
    </div>';
    $b(p_selector).append(loading_html);
    if(typeof p_timeout !== 'undefined'){
	setTimeout(function(){
	    $b('#biq-loading').hide(200);
	},p_timeout);
    }
};
/**
 * Currently unused, basicly it will get to which layout belong: "header", "body" or "footer"
 */
BIQThemeManager.prototype.getLayoutClass = function(){
    var self = this;
    var ret = '';//return class name of main layout wrapper
    
    var layout_class_arr = ["header", "body", "footer"];
    
    var layout_el = self.hover_to_edit.widget_sel.closest('.layout');
    for(var i=0; i<layout_class_arr.length; i++){
	if( layout_el.hasClass( layout_class_arr[i] ) ) ret = layout_class_arr[i];
    }
    return ret;
};
